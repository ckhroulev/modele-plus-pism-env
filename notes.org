#+title: PISM-IceBin-ModelE in a container

* Create a basic development environment

  Versions used here should not matter very much. Compiler versions
  _might_, though.

  Note that =python3= is needed to run Spack and =python2= is needed
  to build IceBin (=ibmisc= has a Python 2.x script that generates
  some code). Spack no longer supports Python 2.x, so this has to come
  from a system package.

  Some of these packages are very much optional.

#+name: basic-dev-environment
#+begin_src bash
#!/bin/bash

set -e
set -u
set -x

export DEBIAN_FRONTEND=noninteractive

# Install system packages
apt-get update
apt-get install -y \
        binutils \
        bzip2 \
        cmake \
        coreutils \
        curl \
        environment-modules \
        g++ \
        gcc \
        gdb \
        gfortran \
        git \
        libc6-dbg \
        make \
        pkgconf \
        python2 \
        python3 \
        tar \
        valgrind \
        vim \
        xz-utils

apt-get autoremove -y
apt-get clean -y
rm -rf /var/lib/apt/lists/*
#+end_src

* Install Spack and create an environment

  Here we increase the timeout to make Spack wait for slow servers
  (most likely GNU).
  
#+name: install-spack
#+begin_src bash
# Install spack 0.20
git clone --depth=100 --branch=releases/v0.20 https://github.com/spack/spack.git ~/spack

. ~/spack/share/spack/setup-env.sh
spack compiler find
spack external find
spack config add config:connect_timeout:600

mkdir -p ~/pism-modele-env
spack env create -d ~/pism-modele-env
#+end_src

* Install most dependencies using Spack

  The YAML document below describes versions of all of the packages
  *directly* used by PISM, ibmisc, IceBin, and ModelE. Except for
  =curl=. We need =curl= because ModelE seems to think that we need
  libcurl if a HDF5 library is located in the same directory as the
  NetCDF library.

  Note that PISM does not support the PROJ version required by IceBin.
  This is not a problem because we can easily disable this part of
  PISM (it is just a convenience).

#+name: spack-yaml
#+begin_src yaml
# This is a Spack Environment file.
#
# It describes a set of packages to be installed, along with
# configuration settings.
spack:
  # add package specs to the `specs` list
  specs:
  - openmpi@4.1.5
  # Disable fancy PETSc variants
  - petsc@3.19.1+double~fortran~hdf5~hypre~metis+mpi+shared
  ## PISM dependencies
  - fftw@3.3.10~mpi precision=double
  - gsl@2.7.1
  - netcdf-c@4.9.2
  - udunits@2.2.28
  ## IceBin, ibmisc, and ModelE dependencies
  - python@3.10.10
  - py-numpy@1.24.3
  - py-cython@0.29.33
  # Some of these Boost libraries are used in IceBin, some others in CGAL.
  - boost@1.82.0+container+date_time+exception+filesystem+math+mpi+program_options+random+regex+serialization+system+thread
  - cgal@5.4.1
  - curl@8.0.1
  - eigen@3.3.1
  - everytrace@0.2.2
  - gmp@6.2.1
  - googletest@1.12.1
  - mpfr@4.2.0
  - netcdf-cxx4@4.3.1
  - netcdf-fortran@4.6.0
  # PnetCDF should not be needed, but some ModelE builds depend on it
  - parallel-netcdf@1.12.3~cxx+fortran
  # Use an old PROJ version: IceBin uses the old API
  - proj@4.9.2
  - tclap@1.2.2
  - zlib@1.2.13
  view: true
  concretizer:
    # this will ensure the reuse of dependencies
    unify: true
#+end_src

Now we can install all these by running
#+name: spack-install-packages
#+begin_src bash
# Install all the packages listed in spack.yaml
. ~/spack/share/spack/setup-env.sh && spack env activate ~/pism-modele-env
spack install
#+end_src

* Install Blitz++

The Spack package =blitz= is broken and I don't want to wait for them
to fix it. See https://github.com/spack/spack/pull/26587

#+name: install-blitz
#+begin_src bash
# Install Blitz++

prefix=~/local/blitz

# Install Blitz
git clone -b 1.0.2 https://github.com/blitzpp/blitz.git ~/blitz
mkdir -p ~/blitz/build

cmake -S ~/blitz \
      -B ~/blitz/build \
      -DCMAKE_INSTALL_PREFIX=${prefix} \
      -DCMAKE_BUILD_TYPE=Release;

make -C ~/blitz/build install
rm -rf ~/blitz
#+end_src

* Create a file system "view" of several packages

  At least one of the build systems cannot find dependencies provided
  by Spack. Here we creates symbolic links to work around this issue.

#+name: create-symlinks
#+begin_src bash
# Set up symlinks to work around some build system issues

. ~/spack/share/spack/setup-env.sh && spack env activate ~/pism-modele-env

spack view symlink ~/local/spack \
      curl \
      netcdf-c \
      netcdf-cxx4 \
      netcdf-fortran \
      openmpi \
      parallel-netcdf \
      udunits \
  ;
#+end_src

* Finishing touches

- We need to set up Spack in =.bashrc=.
- We bind PISM's sources to =/opt/pism=. PISM's build system runs
  =git= to determine the version of PISM we're building and we need to
  tell Git that =/opt/pism= is safe.
- We need to tell ModelE where to look for the IceBin library at runtime.  

#+name: git-and-bash-setup
#+begin_src bash
# Final touches

# Tell Git that /opt/pism is safe (used by PISM's build system to get PISM's version)
git config --global --add safe.directory /opt/pism
# Set up Spack
echo ". ~/spack/share/spack/setup-env.sh" >> ~/.bashrc
# Activate the environment
echo "spack env activate ~/pism-modele-env" >> ~/.bashrc
# Tell everyone where libicebin.so is (needed to run ModelE with icebin)
echo "export LD_LIBRARY_PATH=$HOME/local/icebin/lib" >> ~/.bashrc
# Start $HOME.
echo "cd ~" >> ~/.bashrc
#+end_src

* Complete Dockerfile

#+begin_src dockerfile :tangle Dockerfile :noweb yes :results none
FROM ubuntu:22.04

RUN <<EOF
<<basic-dev-environment>>
EOF

# Add a user: we don't need to do anything else as root.
RUN useradd --create-home --system --shell=/bin/false builder && usermod --lock builder
USER builder

# Install spack
RUN <<EOF
<<install-spack>>
EOF

COPY <<EOF /home/builder/pism-modele-env/spack.yaml
<<spack-yaml>>
EOF

RUN <<EOF
<<spack-install-packages>>
EOF

RUN <<EOF
<<install-blitz>>
EOF

run <<EOF
<<create-symlinks>>
EOF

RUN <<EOF
<<git-and-bash-setup>>
EOF
#+end_src

* Building PISM, IceBin, ModelE
Run this to build everything:
#+begin_src bash :tangle build-all.sh
#!/bin/bash

set -e
set -x
set -u

pushd $SCRIPTS_DIR
./build-pism.sh
./build-ibmisc.sh
./build-icebin.sh
./build-modele.sh
popd
#+end_src

** Building PISM

#+name: build-pism
#+begin_src bash :tangle build-pism.sh
#!/bin/bash

set -e
set -u
set -x

# The variable PISM_DIR should point to PISM's source tree.

PREFIX=$HOME/local/pism
BUILD_DIR=$HOME/build/pism

mkdir -p ${BUILD_DIR}
rm -f ${BUILD_DIR}/CMakeCache.txt

export CC=mpicc
export CXX=mpicxx

cmake -S ${PISM_DIR} -B ${BUILD_DIR} \
  -DCMAKE_INSTALL_PREFIX=${PREFIX} \
  -DPism_USE_EVERYTRACE=TRUE \
  -DPism_BUILD_ICEBIN=TRUE \
  -DCMAKE_BUILD_TYPE=Debug \
  ;

make -j -C ${BUILD_DIR} install

#+end_src

** Building ibmisc and IceBin

We build ibmisc from sources because
- it depends on Blitz++, which we (currently) cannot install via Spack
- we may need to use a custom version of it, or modify some code

*** ibmisc
Note that we disable compiler warnings: using =-w=: there are too
many.
#+name: build-ibmisc
#+begin_src bash :tangle build-ibmisc.sh
#!/bin/bash

set -e
set -x
set -u

BUILD_DIR=~/local/build/ibmisc
PREFIX=$HOME/local/ibmisc

mkdir -p ${BUILD_DIR}
rm -f ${BUILD_DIR}/CMakeCache.txt

cmake -S ${IBMISC_DIR} -B ${BUILD_DIR} \
      -DCMAKE_INSTALL_PREFIX=${PREFIX} \
      -DCMAKE_BUILD_TYPE=Debug \
      -DCMAKE_FIND_ROOT_PATH=~/local/blitz \
      -DCMAKE_CXX_FLAGS="-fpermissive -w" \
  ;

make -j -C ${BUILD_DIR} install
#+end_src

*** IceBin

#+begin_quote
Consider removing =-Wno-dev= and cleaning up the build system.
#+end_quote

#+name: build-icebin
#+begin_src bash :tangle build-icebin.sh
#!/bin/bash

set -e
set -x
set -u

BUILD_DIR=~/local/build/icebin
PREFIX=$HOME/local/icebin

mkdir -p ${BUILD_DIR}
rm -f ${BUILD_DIR}/CMakeCache.txt

# ibmisc headers are full of these...
IGNORED_WARNINGS="-Wno-ignored-attributes -Wno-narrowing -Wno-vexing-parse -Wno-return-type -Wno-deprecated-declarations -Wno-format"

# prefixes to use when looking for dependencies (have to be absolute paths; don't use ~)
PREFIXES="$HOME/local/blitz;$HOME/local/ibmisc;$HOME/local/spack;$HOME/local/pism"

cmake -S ${ICEBIN_DIR} -B ${BUILD_DIR} \
      -DCMAKE_INSTALL_PREFIX=${PREFIX} \
      -DCMAKE_CXX_FLAGS="${IGNORED_WARNINGS}" \
      -DCMAKE_BUILD_TYPE=Debug \
      -DCGAL_DO_NOT_WARN_ABOUT_CMAKE_BUILD_TYPE=TRUE \
      -DCMAKE_PREFIX_PATH=${PREFIXES} \
      -DUSE_PISM=TRUE \
      -DBUILD_MODELE=TRUE \
      -Wno-dev \
  2>&1 | tee ${BUILD_DIR}/configure.log

make -j -C ${BUILD_DIR} install
#+end_src

** ModelE

To build and run ModelE we need a "rundeck" file, all the input files
(their locations are hard wired), plus a configuration file generated
here.

This is the rundeck file. I had to modify it a bit to
- disable PnetCDF I/O to avoid a bug in ModelE,
- add IceBin-related modules (were missing in the version I got),
- remove a C-style comment =/* needed for "Ent" only */= that led to a
  confusing error.

I am not sure this rundeck is correct.

*** rundeck

#+name: rundeck-R
#+begin_src fundamental :tangle rundeck.R
E6F40.R GISS ModelE Lat-Lon Atmosphere Model, 1850 atm./ocean

E6F40 is based on LLF40 with updated aerosol/ozone input files for CMIP6 simulations

Lat-lon: 2x2.5 degree horizontal resolution
F40: 40 vertical layers with standard hybrid coordinate, top at .1 mb
Atmospheric composition for year 1850
Ocean climatology prescribed from years 1876-1885, CMIP6
Uses turbulence scheme (no dry conv), grav.wave drag
Time steps: dynamics 3.75 min leap frog; physics 30 min.; radiation 2.5 hrs
Filters: U,V in E-W and N-S direction (after every physics time step)
         U,V in E-W direction near poles (after every dynamics time step)
         sea level pressure (after every physics time step)

Preprocessor Options
#define STDHYB                   ! standard hybrid vertical coordinate
#define ATM_LAYERING L40         ! 40 layers, top at .1 mb
#define NEW_IO                   ! new I/O (netcdf) on
#define IRRIGATION_ON
#define SWFIX_20151201
#define NO_HDIURN                ! exclude hdiurn diagnostics
#define MODIS_LAI
#define NEW_BCdalbsn
#define LIPLUGGABLE
#define USE_ICEBIN
End Preprocessor Options

Object modules:
     ! resolution-specific source codes
Atm144x90                           ! horizontal resolution is 144x90 -> 2x2.5deg
AtmLayering                         ! vertical resolution
DIAG_RES_F                          ! diagnostics
FFT144                              ! Fast Fourier Transform

IO_DRV                              ! new i/o

     ! GISS dynamics with gravity wave drag
ATMDYN MOMEN2ND                     ! atmospheric dynamics
QUS_DRV QUS3D                       ! advection of Q/tracers
STRATDYN STRAT_DIAG                 ! stratospheric dynamics (incl. gw drag)

! ---------- BEGIN #include b'/gpfsm/dnb53/laroach1/harn/twh/modelE/templates/latlon_source_files'
    ! lat-lon grid specific source codes
AtmRes
GEOM_B                              ! model geometry
DIAG_ZONAL GCDIAGb                  ! grid-dependent code for lat-circle diags
DIAG_PRT POUT                       ! diagn/post-processing output
! ---------- END #include b'/gpfsm/dnb53/laroach1/harn/twh/modelE/templates/latlon_source_files'
! ---------- BEGIN #include b'/gpfsm/dnb53/laroach1/harn/twh/modelE/templates/modelE4_source_files'
MODEL_COM                           ! calendar, timing variables
MODELE_DRV                          ! ModelE cap
MODELE                              ! initialization and main loop
ATM_COM                             ! main atmospheric variables
ATM_DRV                             ! driver for atmosphere-grid components
ATMDYN_COM                          ! atmospheric dynamics
ATM_UTILS                           ! utilities for some atmospheric quantities
QUS_COM QUSDEF                      ! T/Q moments, 1D QUS
CLOUDS2 CLOUDS2_DRV CLOUDS_COM      ! clouds modules
SURFACE SURFACE_LANDICE FLUXES FLUXESIO             ! surface calculation and fluxes
GHY_COM GHY_DRV    ! + giss_LSM     ! land surface and soils + snow model
VEG_DRV                             ! vegetation
! VEG_COM VEGETATION                ! old vegetation
ENT_DRV  ENT_COM   ! + Ent          ! new vegetation
PBL_COM PBL_DRV PBL                 ! atmospheric pbl
IRRIGMOD                            ! irrigation module
ATURB                               ! turbulence in whole atmosphere
LAKES_COM LAKES                     ! lake modules
SEAICE SEAICE_DRV                   ! seaice modules
LANDICE LANDICE_COM LANDICE_IO LANDICE_IO_SUBS LANDICE_DRV LANDICE_DIAG LISnow LISheetIceBin ! land ice modules
ICEDYN_DRV ICEDYN                   ! ice dynamics modules
RAD_COM RAD_DRV RADIATION           ! radiation modules
RAD_UTILS ALBEDO READ_AERO ocalbedo ! radiation and albedo
DIAG_COM DIAG DEFACC                ! diagnostics
OCN_DRV                             ! driver for ocean-grid components
! ---------- END #include b'/gpfsm/dnb53/laroach1/harn/twh/modelE/templates/modelE4_source_files'
! ---------- BEGIN #include b'/gpfsm/dnb53/laroach1/harn/twh/modelE/templates/static_ocn_source_files'
OCEAN OCNML                         ! ocean modules
! ---------- END #include b'/gpfsm/dnb53/laroach1/harn/twh/modelE/templates/static_ocn_source_files'

Components:
! ---------- BEGIN #include b'/gpfsm/dnb53/laroach1/harn/twh/modelE/templates/E4_components_nc'
shared MPI_Support solvers giss_LSM 
dd2d
! ---------- END #include b'/gpfsm/dnb53/laroach1/harn/twh/modelE/templates/E4_components_nc'
Ent
lipluggable

Component Options:
OPTS_Ent = ONLINE=YES PS_MODEL=FBB PFT_MODEL=ENT !/* needed for "Ent" only */
!OPTS_dd2d = NC_IO=PNETCDF

Data input files:
! ---------- BEGIN #include b'/gpfsm/dnb53/laroach1/harn/twh/modelE/templates/IC_144x90_input_files'
    ! start from the restart file of an earlier run ...                 ISTART=8
! AIC=1....rsfE... ! initial conditions, no GIC needed, use
!! AIC=1JAN1961.rsfE4F40.MXL65m   ! end of run with KOCEAN=0

    ! start from observed conditions AIC(,OIC), model ground data GIC   ISTART=2
! AIC=AIC.RES_F40.D771201.nc      ! observed initial conditions for F40 1977/12/01
! AIC=AIC_144x90_DEC01_L96.nc     ! observed initial conditions for F96 1977/12/01
AIC=NCARIC.144x90.D7712010_ext.nc ! AIC for automatic relayering to model vertical grid
GIC=inputs/GIC   ! initial ground conditions
! ---------- END #include b'/gpfsm/dnb53/laroach1/harn/twh/modelE/templates/IC_144x90_input_files'
! ---------- BEGIN #include b'/gpfsm/dnb53/laroach1/harn/twh/modelE/templates/static_ocn_1880_144x90_input_files'

OSST=OST_144x90.1876-1885avg.CMIP6.nc     ! climatological ocean temperature
SICE=SICE_144x90.1876-1885avg.CMIP6.nc    ! climatological sea ice cover
ZSIFAC=ZSIfac_144x90.1876-1885avg.CMIP6.nc  ! climatological sea ice thickness
TOPO=inputs/topoa.nc                      ! ocean fraction and surface topography
!! Q-flux ocean: use the next line instead, set KOCEAN=1
!! OHT=OTSPEC.E4F40.MXL65m.1956-1960         ! ocean horizontal heat transports
!! OCNML=Z1O.B144x90.nc                      ! mixed layer depth for Q-flux model
! ---------- END #include b'/gpfsm/dnb53/laroach1/harn/twh/modelE/templates/static_ocn_1880_144x90_input_files'
RVR=RD_Fb.nc             ! river direction file
NAMERVR=RD_Fb.names.txt  ! named river outlets

! ---------- BEGIN #include b'/gpfsm/dnb53/laroach1/harn/twh/modelE/templates/land144x90_input_files'
CDN=CD144X90.ext.nc
VEG=V144x90_EntMM16_lc_max_trimmed_scaled_nocrops.ext.nc
LAIMAX=V144x90_EntMM16_lai_max_trimmed_scaled_ext.nc
HITEent=V144x90_EntMM16_height_trimmed_scaled_ext.nc
LAI=V144x90_EntMM16_lai_trimmed_scaled_ext.nc
CROPS=CROPS_and_pastures_Pongratz_to_Hurtt_144X90N_nocasp.nc
IRRIG=Irrig144x90_1848to2100_FixedFuture_v3.nc
SOIL=S144X900098M.ext.nc
TOP_INDEX=top_index_144x90_a.ij.ext.nc
ZVAR=ZVAR2X25A.nc             ! topographic variation for gwdrag
! probably need these (should convert to 144x90)
soil_textures=soil_textures_top30cm_2x2.5
SOILCARB_global=soilcarb_top30cm_2x2.5.nc
GLMELT=GLMELT_144X90_gas.OCN.nc
! ---------- END #include b'/gpfsm/dnb53/laroach1/harn/twh/modelE/templates/land144x90_input_files'
! ---------- BEGIN #include b'/gpfsm/dnb53/laroach1/harn/twh/modelE/templates/rad_input_files'
RADN1=sgpgxg.table8                           ! rad.tables and history files
RADN2=LWTables33k_lowH2O_CO2_O3_planck_1-800  ! rad.tables and history files
RADN4=LWCorrTables33k                         ! rad.tables and history files
RADN5=H2Ocont_MT_CKD  ! Mlawer/Tobin_Clough/Kneizys/Davies H2O continuum table
! other available H2O continuum tables:
!    RADN5=H2Ocont_Ma_2000
!    RADN5=H2Ocont_Ma_2004
!    RADN5=H2Ocont_Roberts
!    RADN5=H2Ocont_MT_CKD  ! Mlawer/Tobin_Clough/Kneizys/Davies
RADN3=miescatpar.abcdv2

RH_QG_Mie=oct2003.relhum.nr.Q633G633.table
RADN7=STRATAER.VOL.1850-2014_CMIP6_hdr  ! needs MADVOL=2
RADN8=cloud.epsilon4.72x46
!RADN9=solar.lean2015.ann1610-2014.nc ! need KSOLAR=2
RADN9=solar.CMIP6official.ann1850-2299_with_E3_fastJ.nc ! need KSOLAR=2
RADNE=topcld.trscat8

ISCCP=ISCCP.tautables
GHG=GHG.CMIP6.1-2014.txt  !  GreenHouse Gases for CMIP6 runs up to 2014
CO2profile=CO2profile.Jul2017.txt ! scaling of CO2 in stratosphere
dH2O=dH2O_by_CH4_monthly

! ---------- END #include b'/gpfsm/dnb53/laroach1/harn/twh/modelE/templates/rad_input_files'
! ---------- BEGIN #include b'/gpfsm/dnb53/laroach1/harn/twh/modelE/templates/rad_144x90_input_files_CMIP6clim'
! Begin NINT E2.1 input files

BCdalbsn=cmip6_nint_inputs_E14TomaOCNf10_4av_decadal/BCdalbsn
DUSTaer=cmip6_nint_inputs_E14TomaOCNf10_4av_decadal/DUST
TAero_SUL=cmip6_nint_inputs_E14TomaOCNf10_4av_decadal/SUL
TAero_SSA=cmip6_nint_inputs_E14TomaOCNf10_4av_decadal/SSA
TAero_NIT=cmip6_nint_inputs_E14TomaOCNf10_4av_decadal/NIT
TAero_OCA=cmip6_nint_inputs_E14TomaOCNf10_4av_decadal/OCA
TAero_BCA=cmip6_nint_inputs_E14TomaOCNf10_4av_decadal/BCA
TAero_BCB=cmip6_nint_inputs_E14TomaOCNf10_4av_decadal/BCB

O3file=cmip6_nint_inputs_E14TomaOCNf10_4av_decadal/O3
Ox_ref=o3_2010_shindell_144x90x49_April1850.nc

! End NINT E2.1 input files
! ---------- END #include b'/gpfsm/dnb53/laroach1/harn/twh/modelE/templates/rad_144x90_input_files_CMIP6clim'

MSU_wts=MSU_SSU_RSS_weights.txt      ! MSU-diag
REG=REG2X2.5                      ! special regions-diag

Label and Namelist:  (next 2 lines)
E6F40 (LLF40 + updated aerosol/ozone input files for CMIP6 simulations, 1850 atm/ocean) 

&&PARAMETERS
! ---------- BEGIN #include b'/gpfsm/dnb53/laroach1/harn/twh/modelE/templates/static_ocn_params'
! parameters set for choice of ocean model:
KOCEAN=0        ! ocean is prescribed
!! KOCEAN=1        ! ocean is computed
Kvflxo=0        ! usually set to 1 only during a prescr.ocn run by editing "I"
!  Kvflxo=1     ! saves VFLXO files to prepare for q-flux runs (mkOTSPEC)

variable_lk=1   ! variable lakes
li_twoway = 1

! ---------- END #include b'/gpfsm/dnb53/laroach1/harn/twh/modelE/templates/static_ocn_params'
! ---------- BEGIN #include b'/gpfsm/dnb53/laroach1/harn/twh/modelE/templates/sdragF40_params'
! drag params if grav.wave drag is not used and top is at .01mb
X_SDRAG=.002,.0002  ! used above P(P)_sdrag mb (and in top layer)
C_SDRAG=.0002       ! constant SDRAG above PTOP=150mb
P_sdrag=1.          ! linear SDRAG only above 1mb (except near poles)
PP_sdrag=1.         ! linear SDRAG above PP_sdrag mb near poles
P_CSDRAG=1.         ! increase CSDRAG above P_CSDRAG to approach lin. drag
Wc_JDRAG=30.        ! crit.wind speed for J-drag (Judith/Jim)
ANG_sdrag=1     ! if 1: SDRAG conserves ang.momentum by adding loss below PTOP
! ---------- END #include b'/gpfsm/dnb53/laroach1/harn/twh/modelE/templates/sdragF40_params'
! ---------- BEGIN #include b'/gpfsm/dnb53/laroach1/harn/twh/modelE/templates/gwdragF40_params'
! vsdragl is a tuning coefficient for SDRAG starting at LS1
! layer:   24    25    26    27   28    29    30    31   32   33     34   35   36  37  38   39 40
vsdragl=0.000,0.000,0.000,0.000,0.00,0.000,0.000,0.000,0.00,0.00,  0.00,0.00,0.00,0.3,0.6,0.83,1.

! Gravity wave parameters
PBREAK = 200.  ! The level for GW breaking above.
DEFTHRESH=0.000055  ! threshold (1/s) for triggering deformation waves
PCONPEN=400.   ! penetrating convection defn for GWDRAG
CMC = 0.0000002 ! parameter for GW Moist Convective drag
CSHEAR=10.     ! Shear drag coefficient
CMTN=0.1       ! default is 0.5
CDEF=1.6       ! tuning factor for deformation -> momentum flux
XCDNST=400.,10000.   ! strat. gw drag parameters
QGWMTN=1 ! mountain waves ON
QGWDEF=1 ! deformation waves ON
QGWSHR=0 ! shear drag OFF
QGWCNV=0 ! convective drag OFF

! ---------- END #include b'/gpfsm/dnb53/laroach1/harn/twh/modelE/templates/gwdragF40_params'

! cond_scheme=2   ! newer conductance scheme (N. Kiang) ! not used with Ent

! The following two lines are only used when aerosol/radiation interactions are off
FS8OPX=1.,1.,1.,1.,1.5,1.5,1.,1.
FT8OPX=1.,1.,1.,1.,1.,1.,1.3,1.

! Increasing U00a decreases the high cloud cover; increasing U00b decreases net rad at TOA
U00a=0.655  ! above 850mb w/o MC region;  tune this first to get 30-35% high clouds
U00b=1.00   ! below 850mb and MC regions; tune this last  to get rad.balance
WMUI_multiplier = 2.
use_vmp=1
radius_multiplier=1.1

PTLISO=0.        ! pressure(mb) above which radiation assumes isothermal layers
H2ObyCH4=1.      ! if =1. activates stratospheric H2O generated by CH4 without interactive chemistry
KSOLAR=2         ! 2: use long annual mean file ; 1: use short monthly file

! ---------- BEGIN #include b'/gpfsm/dnb53/laroach1/harn/twh/modelE/templates/atmCompos_1850_params'
! parameters that control the atmospheric/boundary conditions
! if set to 0, the current (day/) year is used: transient run
master_yr=1850
!crops_yr=1850  ! if -1, crops in VEG-file is used
!s0_yr=1850
!s0_day=182
!ghg_yr=1850
!ghg_day=182
!irrig_yr=1850
volc_yr=-1
!volc_day=182
!aero_yr=1850
od_cdncx=0.        ! don't include 1st indirect effect
cc_cdncx=0.        ! don't include 2nd indirect effect (used 0.0036)
!albsn_yr=1850
dalbsnX=1.
!o3_yr=-1850
!aer_int_yr=1850    !select desired aerosol emissions year or 0 to use JYEAR
! atmCO2=368.6          !uatm for year 2000 - enable for CO2 tracer runs

!variable_orb_par=0
!orb_par_year_bp=100  !  BP i.e. 1950-orb_par_year_bp AD = 1850 AD
MADVOL=2
! ---------- END #include b'/gpfsm/dnb53/laroach1/harn/twh/modelE/templates/atmCompos_1850_params'

DTsrc=1800.      ! cannot be changed after a run has been started
DT=225.
! parameters that control the Shapiro filter
DT_XUfilter=225. ! Shapiro filter on U in E-W direction; usually same as DT
DT_XVfilter=225. ! Shapiro filter on V in E-W direction; usually same as DT
DT_YVfilter=0.   ! Shapiro filter on V in N-S direction
DT_YUfilter=0.   ! Shapiro filter on U in N-S direction

NIsurf=2         ! surface interaction computed NIsurf times per source time step
NRAD=5           ! radiation computed NRAD times per source time step
! ---------- BEGIN #include b'/gpfsm/dnb53/laroach1/harn/twh/modelE/templates/diag_params'
! parameters that affect at most diagn. output:  standard if DTsrc=1800. (sec)
aer_rad_forc=0   ! if set =1, radiation is called numerous times - slow !!
cloud_rad_forc=1 ! calls radiation twice; use =0 to save cpu time
SUBDD=' '        ! no sub-daily frequency diags
NSUBDD=0         ! saving sub-daily diags every NSUBDD-th physics time step (1/2 hr)
KCOPY=1          ! 0: no output; 1: save .acc; 2: unused; 3: include ocean data
KRSF=12          ! 0: no output; X: save rsf at the beginning of every X month
isccp_diags=1    ! use =0 to save cpu time, but you lose some key diagnostics
nda5d=13         ! use =1 to get more accurate energy cons. diag (increases CPU time)
nda5s=13         ! use =1 to get more accurate energy cons. diag (increases CPU time)
ndaa=13
nda5k=13
nda4=48          ! to get daily energy history use nda4=24*3600/DTsrc
! ---------- END #include b'/gpfsm/dnb53/laroach1/harn/twh/modelE/templates/diag_params'

Nssw=2           ! until diurnal diags are fixed, Nssw has to be even
Ndisk=960        ! write fort.1.nc or fort.2.nc every NDISK source time step
&&END_PARAMETERS

&INPUTZ
 YEARI=1949,MONTHI=12,DATEI=1,HOURI=0, ! pick IYEAR1=YEARI (default) or < YEARI
 YEARE=1949,MONTHE=12,DATEE=2,HOURE=0,     KDIAG=12*0,9,
 ISTART=2,IRANDI=0, YEARE=1949,MONTHE=12,DATEE=1,HOURE=1,
/
!! suggested settings for E6qsF40:
!! YEARI=1901,MONTHI=1,DATEI=1,HOURI=0,
!! YEARE=1931,MONTHE=1,DATEE=1,HOURE=0,   KDIAG=12*0,9,
!! ISTART=8,IRANDI=0, YEARE=1901,MONTHE=1,DATEE=1,HOURE=1,

#+end_src

*** icebin.nc configuration file

Running ModelE with IceBin requires the =icebin.nc= configuration
file. We generate it using a template below. See =build-modele.sh=
below for the command that performs variable substitutions.

#+begin_src conf :tangle icebin.cdl.template
netcdf icebin {
variables:
        int setups ;
        int m.info ;
                m.info:use_smb = "t" ;
                m.info:grid = "${INPUT_DIR}/gcmO.nc" ;
                m.info:topo_ocean = "${INPUT_DIR}/topoo_ng.nc" ;
                m.info:global_ec = "${INPUT_DIR}/global_ecO_ng.nc" ;
                m.info:output_dir = "${OUTPUT_DIR}/icebin" ;
        int m.greenland.info ;
                m.greenland.info:ice_coupler = "PISM" ;
                m.greenland.info:update_elevation = "t" ;
                m.greenland.info:sigma = 50000., 50000., 100. ;
                m.greenland.info:output_dir = "${OUTPUT_DIR}/greenland" ;
        double m.greenland.modele ;
                m.greenland.modele:coupling_type = "DIRICHLET_BC" ;
        double m.greenland.pism ;
                m.greenland.pism:skip = "True" ;
                m.greenland.pism:skip_max = "10" ;
                m.greenland.pism:surface = "given" ;
                m.greenland.pism:sia_e = "3.0" ;
                m.greenland.pism:grid.recompute_longitude_and_latitude = "False";
                m.greenland.pism:extra_vars = "diffusivity,temppabase,tempicethk_basal,bmelt,tillwat,velsurf_mag,mask,thk,topg,usurf,climatic_mass_balance,ice_surface_temp,csurf" ;
                m.greenland.pism:extra_times = "0:.1:1000" ;
                m.greenland.pism:ts_times = "0:.1:1000" ;
                m.greenland.pism:i = "${INPUT_DIR}/g20km_10ka.nc" ;
                m.greenland.pism:surface_given_file = "${INPUT_DIR}/pism_Greenland_5km_v1.1.nc" ;
                m.greenland.pism:ocean_kill_file = "${INPUT_DIR}/pism_Greenland_5km_v1.1.nc" ;
                m.greenland.pism:ts_file = "${OUTPUT_DIR}/greenland/ts_g20km_10ka.nc" ;
                m.greenland.pism:extra_file = "${OUTPUT_DIR}/greenland/ex_g20km_10ka.nc" ;
                m.greenland.pism:o = "${OUTPUT_DIR}/greenland/g20km_10ka.nc" ;
                m.greenland.pism:max_dt = "0.00137";
// global attributes:
                :_NCProperties = "version=2,netcdf=4.9.0,hdf5=1.8.18" ;
data:

 setups = _ ;

 m.info = _ ;

 m.greenland.info = _ ;

 m.greenland.modele = _ ;

 m.greenland.pism = _ ;
}
#+end_src

*** ModelE build script
   
#+name: build-modele.sh
#+begin_src bash :tangle build-modele.sh
#!/bin/bash

set -x
set -e
set -u

echo "Using ModelE in ${MODELE_DIR} and data in ${MODELE_DATA_DIR}..."

MODELE_BUILD=~/local/modele
MODELE_SUPPORT=~/modele-support

rm -rf ${MODELE_BUILD}
mkdir -p ${MODELE_BUILD}
# make a copy of ModelE sources to simulate "out of source" building
cp -r ${MODELE_DIR}/* ${MODELE_BUILD}

cd ${MODELE_BUILD}/decks

# remove and re-create the "support" directory
rm -rf ${MODELE_SUPPORT}
make config ModelE_Support=${MODELE_SUPPORT} SHELL=/bin/bash OVERWRITE=YES

# set compiler and MPI parameters
echo "COMPILER=gfortran" >> ~/.modelErc
echo "MPIDISTR=openmpi" >> ~/.modelErc
echo "MPIDIR=$HOME/local/spack" >> ~/.modelErc

# create symlinks to input files
rm -rf ${MODELE_SUPPORT}/prod_input_files/
ln -s ${MODELE_DATA_DIR}/prod_input_files/ ${MODELE_SUPPORT}/

RUNNAME=r01

cp ${MODELE_DATA_DIR}/rundeck.R ./${RUNNAME}.R

make -j setup \
  RUN=${RUNNAME}  \
  MPI=YES \
  COMPILE_WITH_TRAPS=NO \
  NETCDFHOME=$HOME/local/spack \
  PNETCDFHOME=$HOME/local/spack \
  LILIBSDIR=$HOME/local/icebin \
  EXTRA_FFLAGS="-O0 -ggdb3 -fwrapv -fallow-argument-mismatch -fallow-invalid-boz" \
  EXTRA_LFLAGS="-O0 -ggdb3"  \
  2>&1 | tee ${MODELE_BUILD}/${RUNNAME}.compile.log

# generate the icebin.nc config file
mkdir -p ${RUNNAME}/config
export INPUT_DIR=${MODELE_SUPPORT}/prod_input_files/inputs
export OUTPUT_DIR=${MODELE_SUPPORT}/huge_space/${RUNNAME}
cat ${MODELE_DATA_DIR}/icebin.cdl.template | \
  envsubst | \
  ncgen -o ${RUNNAME}/config/icebin.nc -
unset INPUT_DIR
unset OUTPUT_DIR
#+end_src

* Running ModelE
  
#+name: run-modele
#+begin_src bash :tangle run-modele.sh
#!/bin/bash

rm -f ~/modele-support/prod_runs/r01/lock

pushd ~/local/modele/decks

DEBUG_COMMAND="gdb --args" ../exec/runE r01 -d -cold-restart

popd
#+end_src

* The Makefile driving all this

Here's how to use this:

Either clone or symlink repositories to get this directory structure:

#+begin_src bash
find . -maxdepth 2 \( -name .git -prune \) -o -type l -o -type d
#+end_src

#+RESULTS:
| 0                              |
| ./ibmisc                       |
| ./.#notes.org                  |
| ./modele_data                  |
| ./modele_data/prod_input_files |
| ./icebin                       |
| ./.git                         |
| ./pism                         |
  
#+begin_src makefile :tangle rules.mk
IMAGE=ckhrulev/icebin-env:0.0.1

IBMISC_DIR ?= ${PWD}/ibmisc
ICEBIN_DIR ?= ${PWD}/icebin
PISM_DIR ?= ${PWD}/pism
MODELE_DIR ?= ${PWD}/modelE

MODELE_DATA_DIR ?= ${PWD}/modele_data
TOOLS_DIR ?= ${PWD}

SCRIPTS=build-all.sh build-pism.sh build-ibmisc.sh build-icebin.sh build-modele.sh run-modele.sh
GENERATED=${SCRIPTS} icebin.cdl.template rundeck.R Dockerfile

run: build scripts
	docker run \
		--rm \
		-it \
		-v ${ICEBIN_DIR}:/opt/icebin -e ICEBIN_DIR=/opt/icebin \
		-v ${IBMISC_DIR}:/opt/ibmisc -e IBMISC_DIR=/opt/ibmisc \
		-v ${PISM_DIR}:/opt/pism     -e PISM_DIR=/opt/pism \
		-v ${MODELE_DIR}:/opt/modele -e MODELE_DIR=/opt/modele \
		-v ${MODELE_DATA_DIR}:/opt/modele_data -e MODELE_DATA_DIR=/opt/modele_data \
		-v ${TOOLS_DIR}:/opt/tools   -e TOOLS_DIR=/opt/tools \
		${IMAGE} \
		bash

build: Dockerfile
	docker build -t ${IMAGE} .

scripts: ${SCRIPTS}
	chmod a+x ${SCRIPTS}

${GENERATED}: notes.org
	emacs -Q --batch -l org $^ -f org-babel-tangle

clean:
	@rm -f ${GENERATED}
	@rm -f rules.mk
#+end_src

# Note: we have to set org-src-preserve-indentation to be able to use
# a makefile code block.

# Local Variables:
# org-src-preserve-indentation: t
# End:
